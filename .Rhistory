usethis::use_package("ggplot2")
usethis::use_package("dplyr")
# Add dependencies
pkg = c("cluster","dplyr"
"Rtsne","ggplot2","umap",
# Add dependencies
pkg = c("cluster","dplyr",
"Rtsne","ggplot2","umap",
"anocva","readxl","tidyverse",
"ggpubr","naniar", "lubridate",
"survival","ISLR","caret","qqman",
"scatterplot3d","magrittr",
"knitr","ggridges","viridis",
"ggpubr","GGally","reshape2",
"plotly","heatmaply","ggcorrplot",
"umap","anocva","readxl",
"lavaan","mediation","factoextra")
# Add dependencies
pkg_list = c("cluster","dplyr",
"Rtsne","ggplot2","umap",
"anocva","readxl","tidyverse",
"ggpubr","naniar", "lubridate",
"survival","ISLR","caret","qqman",
"scatterplot3d","magrittr",
"knitr","ggridges","viridis",
"ggpubr","GGally","reshape2",
"plotly","heatmaply","ggcorrplot",
"umap","anocva","readxl",
"lavaan","mediation","factoextra")
for (pkg in pkg_list){
usethis::use_package(pkg)
}
# Add dependencies
pkg_list = c("cluster","dplyr",
"Rtsne","ggplot2","umap",
"anocva","readxl","dplyr",
"ggpubr","naniar", "lubridate",
"survival","ISLR","caret","qqman",
"scatterplot3d","magrittr",
"knitr","ggridges","viridis",
"ggpubr","GGally","reshape2",
"plotly","heatmaply","ggcorrplot",
"umap","anocva","readxl",
"lavaan","mediation","factoextra")
for (pkg in pkg_list){
usethis::use_package(pkg)
}
usethis::use_vignette("autoclust")
usethis::use_roxygen_md()
library(roxygen2)
roxygen2::roxygenise()
?compute_dissimilarity_matrix
# list dependencies
pkg_list = c("cluster","dplyr",
"Rtsne","ggplot2","umap",
"anocva","readxl","dplyr",
"ggpubr","naniar", "lubridate",
"survival","ISLR","caret","qqman",
"scatterplot3d","magrittr",
"knitr","ggridges","viridis",
"ggpubr","GGally","reshape2",
"plotly","heatmaply","ggcorrplot",
"umap","anocva","readxl",
"lavaan","mediation","factoextra",
"pheatmap")
# Add them to DESCRIPTION
for (pkg in pkg_list){
usethis::use_package(pkg)
}
# list dependencies
pkg_list = c("cluster","dplyr",
"Rtsne","ggplot2","umap",
"anocva","readxl","dplyr",
"ggpubr","naniar", "lubridate",
"survival","ISLR","caret","qqman",
"scatterplot3d","magrittr",
"knitr","ggridges","viridis",
"ggpubr","GGally","reshape2",
"plotly","heatmaply","ggcorrplot",
"umap","anocva","readxl",
"lavaan","mediation","factoextra",
"pheatmap", "factoextra")
# Add them to DESCRIPTION
for (pkg in pkg_list){
usethis::use_package(pkg)
}
#' @param ndim Maximum number of clusters to consider for the silhouette plot.
#' @return A list containing the dissimilarity matrix, optionally the heatmap plot, and the silhouette plot if specified.
#' @examples
#' # Example of how to use the function
#' result <- compute_dissimilarity_matrix(x = autoant_dataset, metric = "gower")
#' result$dissimilarity_matrix  # Access the matrix
#' result$heatmap_plot  # Access the plot (if plot_dissim = TRUE)
#' result$silhouette_plot  # Access the silhouette plot (if sillplot = TRUE)
#'
#' @export
compute_dissimilarity_matrix <- function(x, metric = c("euclidean", "manhattan", "gower"), stand = FALSE,
plot_dissim = TRUE, plot_title = paste0(metric, " Dissimilarity Matrix"),
plot_title_size = 20, sillplot = TRUE, ndim = 10) {
# Calculate the dissimilarity matrix
x_disim <- daisy(x, metric = metric, stand = stand)
x_dissim_matrix <- as.matrix(x_disim)
# Initialize a list to store results
result <- list(dissimilarity_matrix = x_dissim_matrix)
# Optionally create a heatmap plot
if (plot_dissim) {
pheatmap_dissim <- factoextra::fviz_dist(x_disim) +
theme(axis.text = element_text(size = 9), plot.title = element_text(size = plot_title_size)) +
ggtitle(plot_title)
# Add the plot to the list
result$heatmap_plot <- pheatmap_dissim
}
# Plot silhouette if specified by user
if (sillplot) {
# Calculate silhouette widths for cluster sizes 2 to ndim
sil_width <- numeric(ndim)
for (i in 2:ndim) {
pam_fit <- pam(x_disim, diss = TRUE, k = i)
sil_width[i] <- pam_fit$silinfo$avg.width
}
# Create silhouette plot with ggplot2
sil_data <- data.frame(Clusters = as.integer(1:ndim), Avg_Silhouette_Width = sil_width)
sillplot <- ggplot(sil_data, aes(x = Clusters, y = Avg_Silhouette_Width)) +
geom_line() +
geom_point() +
labs(x = "Number of clusters", y = "Average Silhouette Width") +
theme_minimal()
# Add silhouette plot to the list
result$silhouette_plot <- sillplot
}
# Return the list containing the matrix and, if requested, the plots
return(result)
}
help(ggsave)
theme_line()
theme_bw()
library(ggplot2)
roxygen2::roxygenise()
pkgload::dev_help('compute_dissimilarity_matrix')
sil_data <- sil_data %>% slice_head(n = 1)
roxygen2::roxygenise()
pkgload::dev_help('plot_most_similar_dissimilar')
library(RColorBrewer)
library(randomcoloR)
distinctColorPalette(2)
usethis::use_package("randomcoloR")
usethis::use_package("Rtsne")
roxygen2::roxygenise()
pkgload::dev_help('compute_dissimilarity_matrix')
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
usethis::use_package(cluster)
usethis::use_package("cluster")
visualize_clusters <- function(x, pam_fit, df, id_col, umap_nneight = c(10L, 15L, 20L, 25L, 30L, 35L, 40L, 45L, 50L),
umap_min_dist = c(0.1, 0.25, 0.3, 0.5, 0.75, 0.99), point_size = 2, save_plots = FALSE, plot_outpath = "."){
# Make sure x is a dissimilarity matrix
if (class(x)[1] != "dissimilarity"){
stop("x object must be a dissimilarity matrix")
}
# Make different colors for clusters
num_clusters = length(unique(pam_fit$clustering))
cluster_colors = randomcoloR::distinctColorPalette(num_clusters)
names(cluster_colors) = unique(pam_fit$clustering)
# Make tsne plot
tsne <- Rtsne(x, is_distance=TRUE)
tsne_plot_data <- tsne$Y %>%
data.frame()%>%
setNames(c("tsne1","tsne2"))%>%
mutate(cluster=factor(pam_fit$clustering),
ID=df[[id_col]])
tsne_plot <- ggplot(data = tsne_plot_data, aes(x=tsne1,y=tsne2))+
geom_point(aes(color=cluster), alpha = 0.8, size = point_size) +
theme_linedraw()
# If save_plots TRUE save tsne plot
if (save_plots){
ggsave(filename = "tsne_dist.jpeg", plot = tsne_plot,
bg = "white", path = plot_outpath)
}
# Save results in a list
results <- list()
results$tnse_plot <- tsne_plot
# Make UMAP
umap_plots <- list()
for (neigh in umap_nneight) { # Loop over neighbor values
for (dist in umap_min_dist) { # Loop over distance values
message(sprintf("Computing UMAP for nneigh = %s, min_dist = %s", neigh, dist))
umap_coords <- run_custom_umap(x, neighbors = neigh, min_dist = dist)
ggplot_umap <- plot_custom_umap(umap_coords, pam_fit$clustering, neigh, dist, pt.size = point_size)
umap_plots[[as.character(neigh)]][[as.character(dist)]] <- ggplot_umap
if (save_plots){
ggsave(filename = sprintf("umap_neigh%s_dist%s.png", as.character(neigh), dist),
plot = ggplot_umap, bg = "white", path = plot_outpath)
}
}
}
results$umap_plots <- umap_plots
# Make line plot
# TODO
# Return results
return(results)
}
usethis::use_package("rstanarm")
groups <- as.character(unique(clinical_data_df[[outcome_var_colname]]))
